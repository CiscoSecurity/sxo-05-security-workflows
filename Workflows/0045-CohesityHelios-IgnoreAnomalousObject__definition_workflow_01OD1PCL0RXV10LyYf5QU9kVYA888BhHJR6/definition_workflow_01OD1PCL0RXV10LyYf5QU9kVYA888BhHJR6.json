{
    "workflow": {
        "unique_name": "definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6",
        "name": "0045 - Cohesity Helios - Ignore Anomalous Object",
        "title": "0045 - Cohesity Helios - Ignore Anomalous Object",
        "type": "generic.workflow",
        "base_type": "workflow",
        "variables": [
            {
                "schema_id": "datatype.string",
                "properties": {
                    "value": "",
                    "scope": "input",
                    "name": "observable_value",
                    "type": "datatype.string",
                    "description": "The value of the observable pivoted on",
                    "is_required": false,
                    "is_invisible": false
                },
                "unique_name": "variable_workflow_01OD1SN9NY7FN7XM9qE2366Epc9DOwkVskF",
                "object_type": "variable_workflow"
            },
            {
                "schema_id": "datatype.string",
                "properties": {
                    "value": "yes",
                    "scope": "local",
                    "name": "Delete Sighting and Incident",
                    "type": "datatype.string",
                    "description": "Whether or not to delete the SecureX sighting and incident. Valid values: yes, no",
                    "is_required": false,
                    "is_invisible": false
                },
                "unique_name": "variable_workflow_01QV34P1D1HHC5Ut3kYFhAC2VufNShHAhuH",
                "object_type": "variable_workflow"
            },
            {
                "schema_id": "datatype.string",
                "properties": {
                    "value": "",
                    "scope": "local",
                    "name": "SecureX API Client ID",
                    "type": "datatype.string",
                    "description": "Client ID for your Cisco SecureX API client. You can generate API clients in the Administration section of SecureX",
                    "is_required": false,
                    "is_invisible": false
                },
                "unique_name": "variable_workflow_01RLF380VRZJN2gp4SXiuHkjLwnarUbacof",
                "object_type": "variable_workflow"
            },
            {
                "schema_id": "datatype.secure_string",
                "properties": {
                    "value": "",
                    "scope": "local",
                    "name": "SecureX API Secret",
                    "type": "datatype.secure_string",
                    "description": "Secret for your Cisco SecureX API client. You can generate API clients in the Administration section of SecureX",
                    "is_required": false,
                    "is_invisible": false
                },
                "unique_name": "variable_workflow_01QV80HRJ7P1U3PosexbKwtVHE2qpbfHGm4",
                "object_type": "variable_workflow"
            },
            {
                "schema_id": "datatype.secure_string",
                "properties": {
                    "value": "",
                    "scope": "local",
                    "name": "Helios API Key",
                    "type": "datatype.secure_string",
                    "description": "Your Cohesity Helios API key",
                    "is_required": false,
                    "is_invisible": false
                },
                "unique_name": "variable_workflow_01QV80ORA3K9Q0qAEBviP26r2Jf72XjcDxa",
                "object_type": "variable_workflow"
            },
            {
                "schema_id": "datatype.string",
                "properties": {
                    "value": "",
                    "scope": "input",
                    "name": "observable_type",
                    "type": "datatype.string",
                    "description": "The type of observable pivoted on",
                    "is_required": false,
                    "is_invisible": false
                },
                "unique_name": "variable_workflow_01OD1S4OPBM761m5Yk499Hwq2h6O5uOn0tx",
                "object_type": "variable_workflow"
            }
        ],
        "properties": {
            "atomic": {
                "is_atomic": false
            },
            "delete_workflow_instance": false,
            "description": "Note: This workflow was developed and is supported by Cohesity\n\nThis workflow ignores an anomaly reported in Cohesity Helios. Supported observable: hostname\n\nDocumentation: https:\/\/ciscosecurity.github.io\/sxo-05-security-workflows\/workflows\/0042\n\nSteps:\n[] Make sure the observable type provided is supported\n[] Execute a Python script to restore the object, resolve the alert, and perform optional cleanup in SecureX",
            "display_name": "0045 - Cohesity Helios - Ignore Anomalous Object",
            "runtime_user": {
                "override_target_runtime_user": false,
                "specify_on_workflow_start": false,
                "target_default": true
            },
            "target": {
                "execute_on_target_group": false,
                "execute_on_workflow_target": false,
                "no_target": true,
                "specify_on_workflow_start": false
            }
        },
        "object_type": "definition_workflow",
        "actions": [
            {
                "unique_name": "definition_activity_01RLF4D8X0HX07FBgFnVs5TbteSB9B0e037",
                "name": "Condition Block",
                "title": "Is the observable provided supported?",
                "type": "logic.if_else",
                "base_type": "activity",
                "properties": {
                    "continue_on_failure": false,
                    "display_name": "Is the observable provided supported?",
                    "skip_execution": false
                },
                "object_type": "definition_activity",
                "blocks": [
                    {
                        "unique_name": "definition_activity_01RLF4DFQBRZ32zmDqRM3xpbLrsNdDzPPou",
                        "name": "Condition Branch",
                        "title": "No",
                        "type": "logic.condition_block",
                        "base_type": "activity",
                        "properties": {
                            "condition": {
                                "left_operand": "$workflow.definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6.input.variable_workflow_01OD1S4OPBM761m5Yk499Hwq2h6O5uOn0tx$",
                                "operator": "ne",
                                "right_operand": "hostname"
                            },
                            "continue_on_failure": false,
                            "display_name": "No",
                            "skip_execution": false
                        },
                        "object_type": "definition_activity",
                        "actions": [
                            {
                                "unique_name": "definition_activity_01RLF4M961MNB5jVswFBSIjB3zkVBWBUyAl",
                                "name": "Completed",
                                "title": "Unsupported observable",
                                "type": "logic.completed",
                                "base_type": "activity",
                                "properties": {
                                    "completion_type": "failed-completed",
                                    "continue_on_failure": false,
                                    "display_name": "Unsupported observable",
                                    "result_message": "The observable type \"$workflow.definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6.input.variable_workflow_01OD1S4OPBM761m5Yk499Hwq2h6O5uOn0tx$\" is not supported by this workflow",
                                    "skip_execution": false
                                },
                                "object_type": "definition_activity"
                            }
                        ]
                    }
                ]
            },
            {
                "unique_name": "definition_activity_01OD1PGJBXHNP0wzI1Vj9O2sj5hhTCD6f35",
                "name": "Execute Python Script",
                "title": "Ignore anomaly",
                "type": "python3.script",
                "base_type": "activity",
                "properties": {
                    "action_timeout": 180,
                    "continue_on_failure": false,
                    "display_name": "Ignore anomaly",
                    "script": "'''\nSecureX orchestration workflow python script used to ignore anomalous object on Helios\nand delete or update the sighting once ignore operation is successful\nScript usage:\npython ignore_object_anomaly_alert.py <client_id> <client_password> <helios_api_key> <object> <delete>\nclient_id: Threat Response API client id\nclient_password: Threat Response API client password\nhelios_api_key: Cohesity Helios API key\nobject: Anomalous object name\ndelete: Specifies where to delete or not the sighting once the anomaly is ignored.\n        Can be 'yes' or 'no'.\n'''\nimport argparse\nimport requests\nimport sys\n##### Cohesity Functions #######\ndef _get_property_dict(property_list):\n    '''\n    get property dictionary from list of property dicts\n    with keys, values\n    :param property_list:\n    :return:\n    '''\n    property_dict = {}\n    for property in property_list:\n        property_dict[property['key']] = property['value']\n    return property_dict\ndef get_ransomware_alert_id(args):\n    '''\n    get ransomware alert id from Helios for the given\n    anomalous object\n    :param args:\n    :return:\n    '''\n    try:\n        alert_id = ''\n        url = 'https:\/\/helios.cohesity.com\/mcm\/alerts'\n        params = {\n            \"maxAlerts\": 1000,\n            \"alertCategoryList\": \"kSecurity\",\n            \"alertStateList\": \"kOpen\",\n            \"_includeTenantInfo\": True\n        }\n        headers = {'Content-Type': 'application\/json',\n                   'apiKey': args.helios_api_key}\n        response = requests.get(url, headers=headers, params=params, verify=False)\n        if response.status_code != 200:\n            raise Exception(str(response.json()))\n        for alert in response.json():\n            if alert['alertCode'] == 'CE01516011':\n                property_dict = _get_property_dict(alert['propertyList'])\n                if property_dict.get('object', \"\") == args.object:\n                    alert_id = alert['id']\n        return alert_id\n    except Exception as e:\n        raise Exception(\"Failed to get ransomware alert id from Helios, \" + str(e))\n##### CISCO Functions #######\ndef _get_access_token(args):\n    '''\n    Get Threat Response access token\n    :param args:\n    :return:\n    '''\n    try:\n        url = \"https:\/\/visibility.amp.cisco.com\/iroh\/oauth2\/token\"\n        headers = {\n            \"Content-Type\": \"application\/x-www-form-urlencoded\",\n            \"Accept\": \"application\/json\"\n        }\n        response = requests.post(url, headers=headers, auth=(args.client_id, args.client_password),\n                                 verify=False, data={'grant_type': 'client_credentials'})\n        if response.status_code != 200:\n            raise Exception(str(response.json()))\n        return response.json()['access_token']\n    except Exception as e:\n        raise Exception(\"Failed to get threat response access token, \" + str(e))\ndef update_or_delete_sighting(tr_access_token, args):\n    '''\n    update or delete sighting once the anomaly is ignored\n    :param tr_access_token:\n    :param args:\n    :return:\n    '''\n    try:\n        headers = {\n            'Authorization': 'Bearer ' + tr_access_token,\n            'Content-Type': 'application\/json'\n        }\n        url = 'https:\/\/private.intel.amp.cisco.com\/ctia\/sighting\/search'\n        params = {\n            \"observables.value\": args.object,\n            \"observables.type\": \"hostname\",\n            \"source\": \"Cohesity Helios\"\n        }\n        response = requests.get(url, params=params, headers=headers, verify=False)\n        if response.status_code != 200 or not response.json():\n            raise Exception(\"Failed to find the sighting, \" + str(response.json()))\n        sighting = response.json()[0]\n        sightingId = sighting['id']\n        url = 'https:\/\/private.intel.amp.cisco.com\/ctia\/sighting\/' + sighting['id'].split('\/')[-1]\n        if args.delete == 'yes':\n            response = requests.delete(url, headers=headers, verify=False)\n            if response.status_code != 204:\n                raise Exception(\"Failed to delete sighting, \" + str(response.json()))\n            else:\n                incident_id, relationship_id = get_incident_and_relationship_id(tr_access_token, sightingId)\n                update_or_delete_incident(tr_access_token, incident_id)\n                update_or_delete_relationship(tr_access_token, relationship_id)\n        else:\n            sighting['resolution'] = 'Anomaly is ignored'\n            response = requests.put(url, headers=headers,\n                                    verify=False, json=sighting)\n            if response.status_code != 200:\n                raise Exception('Failed to update the sighting, ' + str(response.json()))\n            else:\n                incident_id, relationship_id = get_incident_and_relationship_id(tr_access_token, sightingId)\n                update_or_delete_incident(tr_access_token, incident_id)\n                update_or_delete_relationship(tr_access_token, relationship_id)\n    except Exception as e:\n        raise Exception(str(e))\ndef get_incident_and_relationship_id(tr_access_token, sightingId):\n    incident_id = \"\"\n    headers = {\n        'Authorization': 'Bearer ' + tr_access_token,\n        'Content-Type': 'application\/json'\n    }\n    try:\n        url = 'https:\/\/private.intel.amp.cisco.com\/ctia\/relationship\/search'\n        params = {\"source_ref\": str(sightingId)}\n        response = requests.get(url, params=params, headers=headers, verify=False)\n        if response.status_code != 200:\n            raise Exception('Failed to get relation, ' + str(response.json()))\n        else:\n            incident_id = response.json()[0]['target_ref']\n            relationship_id = response.json()[0]['id']\n            return incident_id, relationship_id\n    except Exception as e:\n        raise Exception(str(e))\ndef update_or_delete_incident(tr_access_token, incident_id):\n    try:\n        headers = {\n            'Authorization': 'Bearer ' + tr_access_token,\n            'Content-Type': 'application\/json'\n        }\n        url = 'https:\/\/private.intel.amp.cisco.com\/ctia\/incident\/search'\n        params = {\n            \"id\": str(incident_id.split('\/')[-1])\n        }\n        response = requests.get(url, headers=headers, params=params, verify=False)\n        if response.status_code != 200 or not response.json():\n            raise Exception(\"Failed to find the incident, \" + str(response.json()))\n        incident = response.json()[0]\n        url = 'https:\/\/private.intel.amp.cisco.com\/ctia\/incident\/' + str(incident_id.split('\/')[-1])\n        if args.delete == 'yes':\n            response = requests.delete(url, headers=headers, verify=False)\n            if response.status_code != 204:\n                raise Exception(\"Failed to delete incident, \" + str(response))\n        else:\n            incident['status'] = 'Closed'\n            response = requests.put(url, headers=headers,\n                                    verify=False, json=incident)\n            if response.status_code != 200:\n                raise Exception(\"Failed to delete incident, \" + str(response))\n    except Exception as e:\n        raise Exception(str(e))\ndef update_or_delete_relationship(tr_access_token, relationship_id):\n    if args.delete == 'yes':\n        try:\n            headers = {\n                'Authorization': 'Bearer ' + tr_access_token,\n                'Content-Type': 'application\/json'\n            }\n            url = 'https:\/\/private.intel.amp.cisco.com\/ctia\/relationship\/' + str(relationship_id.split('\/')[-1])\n            response = requests.delete(url, headers=headers, verify=False)\n            if response.status_code != 204:\n                raise Exception(\"Failed to delete relationship, \" + str(response))\n        except Exception as e:\n            raise Exception(str(e))\ndef main(args):\n    try:\n        alert_id = get_ransomware_alert_id(args)\n        if not alert_id:\n            raise Exception(\"Failed to find the anomalous object \"\n                            + args.object + \" on Helios\")\n        url = 'https:\/\/helios.cohesity.com\/mcm\/alerts\/' + alert_id\n        headers = {'Content-Type': 'application\/json', 'apiKey': args.helios_api_key}\n        request_payload = {\n            \"status\": \"kSuppressed\"\n        }\n        response = requests.patch(url, headers=headers, json=request_payload, verify=False)\n        if response.status_code != 200:\n            raise Exception('Failed to ignore anomaly on Helios ' + str(response.json()))\n        tr_access_token = _get_access_token(args)\n        update_or_delete_sighting(tr_access_token, args)\n        print(\"Workflow succeeded\")\n    except Exception as e:\n        sys.exit(str(e))\nparser = argparse.ArgumentParser(\n    description=\"Arguments to ignore anomaly on Helios\")\nparser.add_argument(\"client_id\", help=\"Threat Response API client id\")\nparser.add_argument(\"client_password\", help=\"Threat Response API client password\")\nparser.add_argument(\"helios_api_key\", help=\"Cohesity Helios API key\")\nparser.add_argument(\"object\", help=\"Anomalous object name\")\nparser.add_argument(\"delete\", choices=['yes', 'no'],\n                    help=\"Specify if sighting has to be removed from\"\n                         \" private intelligence once anomaly is ignored\")\nargs = parser.parse_args()\nmain(args)",
                    "script_arguments": [
                        "$workflow.definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6.local.variable_workflow_01RLF380VRZJN2gp4SXiuHkjLwnarUbacof$",
                        "$workflow.definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6.local.variable_workflow_01QV80HRJ7P1U3PosexbKwtVHE2qpbfHGm4$",
                        "$workflow.definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6.local.variable_workflow_01QV80ORA3K9Q0qAEBviP26r2Jf72XjcDxa$",
                        "$workflow.definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6.input.variable_workflow_01OD1SN9NY7FN7XM9qE2366Epc9DOwkVskF$",
                        "$workflow.definition_workflow_01OD1PCL0RXV10LyYf5QU9kVYA888BhHJR6.local.variable_workflow_01QV34P1D1HHC5Ut3kYFhAC2VufNShHAhuH$"
                    ],
                    "skip_execution": false
                },
                "object_type": "definition_activity"
            }
        ],
        "categories": [
            "category_01FM7CGPZZCMY0KcvgiGjVH5UaB4y4aDJ7m"
        ]
    },
    "categories": {
        "category_01FM7CGPZZCMY0KcvgiGjVH5UaB4y4aDJ7m": {
            "unique_name": "category_01FM7CGPZZCMY0KcvgiGjVH5UaB4y4aDJ7m",
            "name": "response",
            "title": "response",
            "type": "basic.category",
            "base_type": "category",
            "category_type": "custom",
            "object_type": "category"
        }
    }
}