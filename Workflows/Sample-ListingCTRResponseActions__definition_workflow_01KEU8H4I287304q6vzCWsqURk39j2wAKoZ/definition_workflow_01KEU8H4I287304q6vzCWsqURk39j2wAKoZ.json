{
  "workflow": {
    "unique_name": "definition_workflow_01KEU8H4I287304q6vzCWsqURk39j2wAKoZ",
    "name": "Sample - Listing CTR Response Actions",
    "title": "Sample - Listing CTR Response Actions",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "Action to Find",
          "type": "datatype.string",
          "description": "If you're looking for a specific action, enter its name here. For orchestration workflows, this would be the workflow's exact name. If a matching action is found, the workflow will return its information",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01KEUX9I0HBU40vIeef0Frt1QJNswWubiH6",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "is_atomic": false
      },
      "delete_workflow_instance": false,
      "description": "This workflow shows how to get a list of available response actions from Cisco Threat Response for a given observable. The actions returned may vary depending on the type of observable provided. SecureX orchestration workflows will be returned for any observable type and it's up to the workflow to decide which observables to accept and process.\n\nTarget: CTR_For_Access_Token, CTR_API\n\nSteps:\n[] Get an access token for CTR\n[] Get the available response actions from CTR\n[] Print a human-readable list of modules and actions using Python (see this activity's output for a list of all actions)\n[] Check if an action to find was provided. If so:\n[]\u003e Convert the actions to a table\n[]\u003e Loop through each action looking for the one we want\n[]\u003e If a matching action is found, end the workflow and return its information\n\nMore information about response workflows and actions can be found in our GitHub documentation at https://cs.co/SXO_docs\n\nRun this workflow and inspect each activity's output carefully.",
      "display_name": "Sample - Listing CTR Response Actions",
      "runtime_user": {
        "override_target_runtime_user": false,
        "specify_on_workflow_start": false,
        "target_default": true
      },
      "target": {
        "execute_on_target_group": true,
        "target_group": {
          "target_group_id": "target_group_01EJ0TQWPQWBD0qiWqClJKj9FOzwiZRfOFH",
          "run_on_all_targets": false,
          "selected_target_types": [
            "web-service.endpoint"
          ],
          "use_criteria": {
            "choose_target_using_algorithm": "choose_first_with_matching_criteria",
            "conditions": [
              {
                "operator": "eqi",
                "left_operand": "$targetgroup.web-service endpoint.input.display_name$",
                "right_operand": "CTR_API"
              }
            ]
          }
        }
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01KEUU43HNL8J3Lfk57EPaPfmmSuxc2nKEW",
        "name": "Group",
        "title": "Get response actions",
        "type": "logic.group",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Get response actions",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "actions": [
          {
            "unique_name": "definition_activity_01KEU8QQU6GLB2SEvO3NK9F6icINwbIk5ZN",
            "name": "Generate CTR access token",
            "title": "Generate CTR access token",
            "type": "workflow.atomic_workflow",
            "base_type": "subworkflow",
            "properties": {
              "continue_on_failure": false,
              "display_name": "Generate CTR access token",
              "runtime_user": {
                "target_default": true
              },
              "skip_execution": false,
              "target": {
                "override_workflow_target_group_criteria": true,
                "target_group": {
                  "run_on_all_targets": false,
                  "use_criteria": {
                    "choose_target_using_algorithm": "choose_first_with_matching_criteria",
                    "conditions": [
                      {
                        "left_operand": "$targetgroup.web-service endpoint.input.display_name$",
                        "operator": "eqi",
                        "right_operand": "CTR_For_Access_Token"
                      }
                    ]
                  }
                }
              },
              "workflow_id": "definition_workflow_01779LB6MV0P02kvka9TGV5cEam84NrCTy4"
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_01KEU8OOOMYPO4NANeFXCz2SCARC73pqc1u",
            "name": "List CTR response actions",
            "title": "List CTR response actions",
            "type": "workflow.atomic_workflow",
            "base_type": "subworkflow",
            "properties": {
              "continue_on_failure": false,
              "display_name": "List CTR response actions",
              "input": {
                "variable_workflow_01DBYEK861JR84w4pjFDDI1bkoc1GoFxUzy": "ip",
                "variable_workflow_01DBYF0AOVGVR20gz1OEgDx7i2Y2lnrr4mT": "192.168.1.1",
                "variable_workflow_01DBZ4EAOYVFJ0yY3VzkdOSJmyXf0X5OmfZ": "$activity.definition_activity_01KEU8QQU6GLB2SEvO3NK9F6icINwbIk5ZN.output.variable_workflow_01BNOOXA3G6MV1PGAvsfZOKDdMYcE6XS726$"
              },
              "runtime_user": {
                "target_default": true
              },
              "skip_execution": false,
              "target": {
                "use_workflow_target_group": true
              },
              "workflow_id": "definition_workflow_01DBY5MO9LF981MXZeedBSbaIpOSx3NRF2Q"
            },
            "object_type": "definition_activity"
          }
        ]
      },
      {
        "unique_name": "definition_activity_01KEUOVJQIN7R7CP5vd6MHROtBsNku8af9A",
        "name": "Execute Python Script",
        "title": "Convert module list into readable text",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "description": "Look at this output's activity for a human readable list of modules and actions",
          "display_name": "Convert module list into readable text",
          "script": "import sys,json\n\n# Look at this output's activity for a human readable list of modules and actions\n\nctrJson = json.loads(sys.argv[1])\n\nfor module in ctrJson['data']:\n  print('------------------------------------------------------------------------------------------------------------------\\nModule Name: ' + module['module'] + '\\nInstance ID: ' + module['module_instance_id'] + '\\nAction ID: ' + module['id'] + '\\nAction Title: ' + module['title'] + '\\nAction URL: /iroh-response/' + module['url'] + '\\n------------------------------------------------------------------------------------------------------------------')\n",
          "script_arguments": [
            "$activity.definition_activity_01KEU8OOOMYPO4NANeFXCz2SCARC73pqc1u.output.variable_workflow_01DBYDZ93SS5K4rAnOFkPjegb7K8ChItJMS$"
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_01KEUXPV2FQXW7OX148RZvTFuTUlgVIzXXY",
        "name": "Group",
        "title": "Find the action provided as input",
        "type": "logic.group",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Find the action provided as input",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "actions": [
          {
            "unique_name": "definition_activity_01KEUVXNBEB715Eo3bpNkLANeFdewwETTbA",
            "name": "Condition Block",
            "title": "Was an action to look for provided?",
            "type": "logic.if_else",
            "base_type": "activity",
            "properties": {
              "continue_on_failure": false,
              "display_name": "Was an action to look for provided?",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "blocks": [
              {
                "unique_name": "definition_activity_01KEUVXXRPJC20CRkRqyf5q7ASCBGJKyaOu",
                "name": "Condition Branch",
                "title": "Yes",
                "type": "logic.condition_block",
                "base_type": "activity",
                "properties": {
                  "condition": {
                    "left_operand": "$workflow.definition_workflow_01KEU8H4I287304q6vzCWsqURk39j2wAKoZ.input.variable_workflow_01KEUX9I0HBU40vIeef0Frt1QJNswWubiH6$",
                    "operator": "ne",
                    "right_operand": ""
                  },
                  "continue_on_failure": false,
                  "display_name": "Yes",
                  "skip_execution": false
                },
                "object_type": "definition_activity",
                "actions": [
                  {
                    "unique_name": "definition_activity_01KEUO5BY3YQ94Rq0XHWpLeC114zbqCY9Om",
                    "name": "Read Table from JSON",
                    "title": "Convert actions to table",
                    "type": "corejava.read_table_from_json",
                    "base_type": "activity",
                    "properties": {
                      "action_timeout": 180,
                      "continue_on_failure": false,
                      "display_name": "Convert actions to table",
                      "input_json": "$activity.definition_activity_01KEU8OOOMYPO4NANeFXCz2SCARC73pqc1u.output.variable_workflow_01DBYDZ93SS5K4rAnOFkPjegb7K8ChItJMS$",
                      "jsonpath_query": "$.data",
                      "persist_output": false,
                      "populate_columns": false,
                      "skip_execution": false,
                      "table_columns": [
                        {
                          "column_name": "module",
                          "column_type": "string"
                        },
                        {
                          "column_name": "module_instance_id",
                          "column_type": "string"
                        },
                        {
                          "column_name": "id",
                          "column_type": "string"
                        },
                        {
                          "column_name": "title",
                          "column_type": "string"
                        },
                        {
                          "column_name": "url",
                          "column_type": "string"
                        }
                      ]
                    },
                    "object_type": "definition_activity"
                  },
                  {
                    "unique_name": "definition_activity_01KEUVS3PD7L07HKSSo6r3fq2LIJIaLGDvN",
                    "name": "For Each",
                    "title": "For each response action",
                    "type": "logic.for_each",
                    "base_type": "activity",
                    "properties": {
                      "continue_on_failure": false,
                      "display_name": "For each response action",
                      "skip_execution": false,
                      "source_array": "$activity.definition_activity_01KEUO5BY3YQ94Rq0XHWpLeC114zbqCY9Om.output.read_table_from_json$"
                    },
                    "object_type": "definition_activity",
                    "actions": [
                      {
                        "unique_name": "definition_activity_01KEUVMA7KD5U0M57MEZBDWLagdFHLX6eKS",
                        "name": "Condition Block",
                        "title": "Is this the action we're looking for?",
                        "type": "logic.if_else",
                        "base_type": "activity",
                        "properties": {
                          "continue_on_failure": false,
                          "display_name": "Is this the action we're looking for?",
                          "skip_execution": false
                        },
                        "object_type": "definition_activity",
                        "blocks": [
                          {
                            "unique_name": "definition_activity_01KEUVMHHWJR93B2ScshhfbmQQZAtdVgjGS",
                            "name": "Condition Branch",
                            "title": "Yes",
                            "type": "logic.condition_block",
                            "base_type": "activity",
                            "properties": {
                              "condition": {
                                "left_operand": "$activity.definition_activity_01KEUVS3PD7L07HKSSo6r3fq2LIJIaLGDvN.input.source_array[@].title$",
                                "operator": "eq",
                                "right_operand": "$workflow.definition_workflow_01KEU8H4I287304q6vzCWsqURk39j2wAKoZ.input.variable_workflow_01KEUX9I0HBU40vIeef0Frt1QJNswWubiH6$"
                              },
                              "continue_on_failure": false,
                              "display_name": "Yes",
                              "skip_execution": false
                            },
                            "object_type": "definition_activity",
                            "actions": [
                              {
                                "unique_name": "definition_activity_01KEUYF6IWQDE71FQxa0qBvLexCx36u1iOp",
                                "name": "Completed",
                                "title": "Action found",
                                "type": "logic.completed",
                                "base_type": "activity",
                                "properties": {
                                  "completion_type": "succeeded",
                                  "continue_on_failure": false,
                                  "display_name": "Action found",
                                  "result_message": "Action found!\n\nModule Name: $activity.definition_activity_01KEUVS3PD7L07HKSSo6r3fq2LIJIaLGDvN.input.source_array[@].module$\nInstance ID: $activity.definition_activity_01KEUVS3PD7L07HKSSo6r3fq2LIJIaLGDvN.input.source_array[@].module_instance_id$\nAction ID: $activity.definition_activity_01KEUVS3PD7L07HKSSo6r3fq2LIJIaLGDvN.input.source_array[@].id$\nAction Title: $activity.definition_activity_01KEUVS3PD7L07HKSSo6r3fq2LIJIaLGDvN.input.source_array[@].title$\nAction URL: /iroh-response$activity.definition_activity_01KEUVS3PD7L07HKSSo6r3fq2LIJIaLGDvN.input.source_array[@].url$",
                                  "skip_execution": false
                                },
                                "object_type": "definition_activity"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "unique_name": "definition_activity_01KEV2JYBL0SW6kYGp8xAyn66i0g0jO1iKC",
                    "name": "Completed",
                    "title": "Action not found",
                    "type": "logic.completed",
                    "base_type": "activity",
                    "properties": {
                      "completion_type": "failed-completed",
                      "continue_on_failure": false,
                      "display_name": "Action not found",
                      "result_message": "A matching action was not found for the input provided. Remember, the action name must match what's in CTR exactly.",
                      "skip_execution": false
                    },
                    "object_type": "definition_activity"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "categories": [
      "category_01K8NQAII212R5jdJi1LLd5SCDT9F91tvBR"
    ]
  },
  "categories": {
    "category_01K8NQAII212R5jdJi1LLd5SCDT9F91tvBR": {
      "unique_name": "category_01K8NQAII212R5jdJi1LLd5SCDT9F91tvBR",
      "name": "Sample Workflow",
      "title": "Sample Workflow",
      "type": "basic.category",
      "base_type": "category",
      "description": "Simple workflows that show how to use various aspects of SecureX orchestration",
      "category_type": "custom",
      "object_type": "category"
    }
  },
  "target_groups": {
    "target_group_01EJ0TQWPQWBD0qiWqClJKj9FOzwiZRfOFH": {
      "unique_name": "target_group_01EJ0TQWPQWBD0qiWqClJKj9FOzwiZRfOFH",
      "name": "Default TargetGroup",
      "title": "Default TargetGroup",
      "type": "generic.target_group",
      "base_type": "target_group",
      "version": "1.0.0",
      "targets": [
        {
          "data_target_type": "web-service.endpoint",
          "view_target_type": "web-service.endpoint",
          "include_all_targets": true
        },
        {
          "data_target_type": "email.smtp_endpoint",
          "view_target_type": "email.smtp_endpoint",
          "include_all_targets": true
        },
        {
          "data_target_type": "terminal.endpoint",
          "view_target_type": "terminal.endpoint",
          "include_all_targets": true
        },
        {
          "data_target_type": "aws.endpoint",
          "view_target_type": "aws.endpoint",
          "include_all_targets": true
        }
      ],
      "object_type": "target_group"
    }
  },
  "atomic_workflows": [
    "definition_workflow_01779LB6MV0P02kvka9TGV5cEam84NrCTy4",
    "definition_workflow_01DBY5MO9LF981MXZeedBSbaIpOSx3NRF2Q"
  ]
}